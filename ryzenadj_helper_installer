#!/usr/bin/env bash

SCRIPTS_PATH="$(cd "$(dirname "$0")" && pwd)"
# shellcheck source=/dev/null
source "$SCRIPTS_PATH/translations"

if ! command -v systemd-run systemctl &>/dev/null ; then
    echo "${translations[There is no systemd-run systemctl in the system, without it it will not work]}"
    exit 1
fi

COMMAND_ARGS=${1//-/}
if [[ -z $COMMAND_ARGS ]] || [[ $COMMAND_ARGS =~ ^(h|help)$ ]] ; then
    echo "${translations[Usage: ./ryzenadj_helper_installer <command>

<commands>
  i|install : Installation
  u|uninstall : Deletes all files after installation

  WARNING: Superuser rights required]}
"
    exit 0
fi

if [[ $(id -u) != "0" ]] ; then
    echo "${translations[Superuser rights are required]}"
    if command -v sudo &>/dev/null ; then sudo "$0" "$@"
    elif command -v doas &>/dev/null ; then doas "$0" "$@"
    else echo "${translations[sudo or doas not found!]}"
    fi
else
    cd "$SCRIPTS_PATH" || exit 1
    INSTALL_DIR="/usr/local/"
    [[ ! -d $INSTALL_DIR/bin ]] && mkdir -p $INSTALL_DIR/bin
    [[ ! -d $INSTALL_DIR/lib/systemd/system ]] && mkdir -p $INSTALL_DIR/lib/systemd/system
    [[ ! -d $INSTALL_DIR/lib/udev/rules.d ]] && mkdir -p $INSTALL_DIR/lib/udev/rules.d

    custom_args_ryzenadj() {
            # Honor BMH-WCX9
            if [[ $(</sys/class/dmi/id/product_version) == "M1060" ]] ; then
                arg1_info=" (${translations[default]} 25)"
                arg2_info=" (${translations[default]} 15)"
            # Thinkbook G6+ AHP
            elif [[ $(</sys/class/dmi/id/product_version) == ThinkBook\ 1*\ G6+\ AHP ]] ; then
                arg1_info=" (${translations[default]} 35)"
                arg2_info=" (${translations[default]} 20)"
            fi

            IFS=' ' read -r -a SECUREBOOT_STATUS < <(mokutil --sb-state)
            CHECK_DKMS_SIGN=$(mokutil --list-enrolled | grep -i dkms)
            if [[ ${SECUREBOOT_STATUS[1]} == "enabled" ]] && [[ -z $CHECK_DKMS_SIGN ]] ; then
                if [[ -f /var/lib/dkms/mok.pub ]] ; then
                    echo "${translations[Secureboot is enabled in the BIOS, before using this script you need to import the key for signing dkms modules for ryzen_smu in mokutil]}"
                    echo "${translations[You can use any password]}"
                    mokutil --import /var/lib/dkms/mok.pub
                    echo "${translations[Reboot your device, import the key and run the script again]}"
                    sleep 3 && exit 0
                else
                    echo "${translations[Secureboot is enabled in BIOS, /var/lib/dkms/mok.pub for signing dkms modules for ryzen_smu is missing, disable secureboot or add the key for signing dkms modules to mokutil]}"
                    sleep 3 && exit 1
                fi
            fi

            echo "${translations[Enter the maximum TDP of the processor from the power cable in watts]}$arg1_info:"
            read -r arg1
            echo "${translations[Enter the maximum TDP of the processor from the battery in watts]}$arg2_info:"
            read -r arg2
            echo "${translations[Enter the maximum allowed CPU temperature in Celsius (default 70)]}:"
            read -r arg3 && [[ -z $arg3 ]] && arg3="70"
            echo "${translations[Enter the maximum allowed APU temperature in Celsius (default 70)]}:"
            read -r arg4 && [[ -z $arg4 ]] && arg4="70"

            if [[ $(</sys/class/dmi/id/product_version) == ThinkBook\ 1*\ G6+\ AHP ]] ; then
                echo "${translations[Enter the maximum TDP of the processor from the power cable in watts from a weak charge (default 25)]}:"
                read -r arg5 && [[ -z $arg5 ]] && arg5="25"
                echo "${translations[Enter which profile to use (vantage) after reboot or shutdown, this is necessary for the second system, for example Windows]}"
                echo "${translations[Available profiles: performance, balanced, low-power (balanced by default)]}:"
                read -r arg6 && [[ -z $arg6 ]] && arg6="balanced"
                if [[ -n $arg6 ]] && [[ ! $arg6 =~ ^(performance|balanced|low-power)$ ]] ; then
                    echo "${translations[Invalid argument used, exiting in 3 seconds]}"
                    sleep 3 && exit 1
                fi
            fi

            if [[ -z $CHECK_DKMS_SIGN ]] ; then
                echo "${translations[Install the ryzen_smu kernel module? May improve compatibility with ryzenadj]}"
                echo "${translations[Select y/yes or n/no (default no)]}:"
                read -r arg7 && [[ -z $arg7 ]] && arg7="no"
                if [[ -n $arg7 ]] && [[ ! $arg7 =~ ^(y|yes|n|no)$ ]] ; then
                    echo "${translations[Invalid argument used, exiting in 3 seconds]}"
                    sleep 3 && exit 1
                fi
            fi

            echo "${translations[Add rtcwake to the system so that the device automatically turns off after a long sleep]}"
            echo "${translations[Similar to hibernation, but without saving the current session]}"
            echo "${translations[Select y/yes or n/no (default yes)]}:"
            read -r arg8 && [[ -z $arg8 ]] && arg8="yes"

            if [[ -n $arg8 ]] && [[ ! $arg8 =~ ^(y|yes|n|no)$ ]] ; then
                echo "${translations[Invalid argument used, exiting in 3 seconds]}"
                sleep 3 && exit 1
            fi
            if [[ $arg8 =~ ^(y|yes)$ ]] ; then
                echo "${translations[How long to turn off the device during long sleep in minutes (default 180)]}:"
                read -r arg9 && [[ -z $arg9 ]] && arg9="180"
                arg9=$(( arg9 * 60 ))
            fi
    }

    ryzenadj_install() {
        [[ -d RyzenAdj ]] && rm -r RyzenAdj
        git clone https://github.com/Htylol/RyzenAdj.git
        cd RyzenAdj || exit 1
        rm -r win32
        mkdir build && cd build || exit 1
        cmake -DCMAKE_BUILD_TYPE=Release ..
        make -j$(($(nproc) + 1))
        mv ryzenadj $INSTALL_DIR/bin/ryzenadj
        cd "$SCRIPTS_PATH" && rm -r RyzenAdj || exit 1
        echo "ryzenadj_install done"
    }

    ryzenadj_uninstall() {
        rm -f $INSTALL_DIR/bin/ryzenadj
        [[ $COMMAND_ARGS =~ ^(u|uninstall)$ ]] && echo "ryzenadj_uninstall done"
    }

    ryzen_smu_install() {
        [[ -d ryzen_smu ]] && rm -r ryzen_smu
        git clone https://github.com/Htylol/ryzen_smu.git
        cd ryzen_smu || exit 1
        make dkms-install
        cd "$SCRIPTS_PATH" && rm -r ryzen_smu || exit 1
        if [[ -e /sys/module/amd_pmc ]] ; then
            cat << EOF > /usr/lib/systemd/system-sleep/ryzen_smu
#!/usr/bin/env sh

case \$1 in
    pre)  modprobe -r ryzen_smu ;;
    post) modprobe ryzen_smu ;;
esac
EOF
            chmod 755 /usr/lib/systemd/system-sleep/ryzen_smu
        fi
        echo "ryzen_smu_install done"
    }

    ryzen_smu_uninstall() {
        while true ; do
            IFS='/' read -r -a DKMS_STATUS < <(dkms status | grep ryzen_smu)
            if [[ -n ${DKMS_STATUS[0]} ]]
            then dkms remove ryzen_smu/"${DKMS_STATUS[1]/[,:]*/}" --all
            else break
            fi
        done
        rm -f /usr/lib/systemd/system-sleep/ryzen_smu
        [[ $COMMAND_ARGS =~ ^(u|uninstall)$ ]] && echo "ryzen_smu_uninstall done"
    }

    ryzenadj_helper_install() {
        if [[ -d /sys/class/power_supply/ACAD ]] ; then
            POWER_SUPPLY="ACAD"
        elif [[ -d /sys/class/power_supply/ADP0 ]] ; then
            POWER_SUPPLY="ADP0"
        else
            echo "Unknown /sys/class/power_supply/*"
            exit 1
        fi
        if [[ $(</sys/class/dmi/id/product_version) == ThinkBook\ 1*\ G6+\ AHP ]] ; then
            [[ -z $arg1 ]] && arg1="35"
            [[ -z $arg2 ]] && arg2="20"
            cat << EOF > $INSTALL_DIR/bin/ryzenadj_helper
#!/usr/bin/env bash

case \$1 in
    --on)
        if [[ \$(</sys/class/power_supply/$POWER_SUPPLY/online) == "1" ]]; then
            echo 'performance' >/sys/firmware/acpi/platform_profile
            sleep 5
            if [[ \$(</sys/class/power_supply/ucsi-source-psy-USBC000:001/charge_type) == "Standard" ]] \\
            || [[ \$(</sys/class/power_supply/ucsi-source-psy-USBC000:002/charge_type) == "Standard" ]]
            then ryzenadj -a ${arg5}000 -b ${arg5}000 -c ${arg5}000 --max-performance -f $arg3 --apu-skin-temp=$arg4 &>/dev/null
            else ryzenadj -a ${arg1}000 -b ${arg1}000 -c ${arg1}000 --max-performance -f $arg3 --apu-skin-temp=$arg4 &>/dev/null
            fi
        else
            echo 'low-power' >/sys/firmware/acpi/platform_profile
            sleep 20
            ryzenadj -b ${arg2}000 -b ${arg2}000 -c ${arg2}000 --power-saving -f $arg3 --apu-skin-temp=$arg4 &>/dev/null
        fi ;;
    --off)
        echo '$arg6' >/sys/firmware/acpi/platform_profile ;;
esac

exit 0
EOF

        cat << EOF > $INSTALL_DIR/lib/systemd/system/ryzenadj_helper_off.service
[Unit]
Description=Ryzenadj helper off service
DefaultDependencies=no
Before=poweroff.target halt.target reboot.target

[Service]
Type=exec
ExecStart=/bin/echo
ExecStop=/usr/local/bin/ryzenadj_helper --off

[Install]
WantedBy=poweroff.target halt.target reboot.target
EOF

        systemctl enable --now ryzenadj_helper_off.service 2>/dev/null
        else
            if [[ $(</sys/class/dmi/id/product_version) == "M1060" ]] ; then
                [[ -z $arg1 ]] && arg1="25"
                [[ -z $arg2 ]] && arg2="15"
            fi
            [[ -n $arg1 ]] && arg1="-a ${arg1}000 -b ${arg1}000 -c ${arg1}000"
            [[ -n $arg2 ]] && arg2="-b ${arg2}000 -b ${arg2}000 -c ${arg2}000"
            cat << EOF > $INSTALL_DIR/bin/ryzenadj_helper
#!/usr/bin/env bash

case \$1 in
    --on)
        sleep 1
        if [[ \$(</sys/class/power_supply/$POWER_SUPPLY/online) == "1" ]]
        then ryzenadj $arg1 --max-performance -f $arg3 --apu-skin-temp=$arg4 &>/dev/null
        else ryzenadj $arg2 --power-saving -f $arg3 --apu-skin-temp=$arg4 &>/dev/null
        fi ;;
esac

exit 0
EOF

        fi
        chmod 755 $INSTALL_DIR/bin/ryzenadj_helper

        cat << EOF > $INSTALL_DIR/lib/udev/rules.d/ryzenadj_helper.rules
ACTION=="change", SUBSYSTEM=="power_supply", DEVPATH=="*/power_supply/$POWER_SUPPLY", RUN+="/bin/bash -c 'systemctl restart ryzenadj_helper_on.service'"
EOF

        cat << EOF > /usr/lib/systemd/system-sleep/ryzenadj_helper
#!/usr/bin/env sh

case \$1 in
    post) systemctl restart ryzenadj_helper_on.service ;;
esac
EOF
        chmod 755 /usr/lib/systemd/system-sleep/ryzenadj_helper

        cat << EOF > $INSTALL_DIR/lib/systemd/system/ryzenadj_helper_on.service
[Unit]
Description=Ryzenadj helper on service

[Service]
Type=simple
ExecStart=/usr/local/bin/ryzenadj_helper --on

[Install]
WantedBy=multi-user.target
EOF

        systemctl enable --now ryzenadj_helper_on.service 2>/dev/null
        echo "ryzenadj_helper_install done"
    }

    ryzenadj_helper_uninstall() {
        systemctl disable --now ryzenadj_helper_on.service 2>/dev/null
        systemctl disable --now ryzenadj_helper_off.service 2>/dev/null
        rm -f $INSTALL_DIR/bin/ryzenadj_helper $INSTALL_DIR/lib/udev/rules.d/ryzenadj_helper.rules \
        $INSTALL_DIR/lib/systemd/system/ryzenadj_helper_on.service $INSTALL_DIR/lib/systemd/system/ryzenadj_helper_off.service \
        /usr/lib/systemd/system-sleep/ryzenadj_helper
        [[ $COMMAND_ARGS =~ ^(u|uninstall)$ ]] && echo "ryzenadj_helper_uninstall done"
    }

    suspend_timer_install() {
        cat << EOF > $INSTALL_DIR/bin/suspend-then-shutdown
#!/usr/bin/env sh

delay=$arg9
start=\$(date +%s)
for script in /usr/lib/systemd/system-sleep/* ; do
    [ -x "\$script" ] && "\$script" pre
done
rtcwake -s \$delay -m mem
for script in /usr/lib/systemd/system-sleep/* ; do
    [ -x "\$script" ] && "\$script" post
done
end=\$(date +%s)
if [ \$((end-start)) -ge \$delay ] ; then
    systemd-run --on-active=5 systemctl poweroff
fi
EOF
        chmod 755 $INSTALL_DIR/bin/suspend-then-shutdown

        cat << EOF > $INSTALL_DIR/lib/systemd/system/systemd-suspend.service
[Unit]
Description=Suspend; Shutdown if not used for a period of time

[Service]
Type=oneshot
ExecStart=/usr/local/bin/suspend-then-shutdown
EOF

        echo "suspend_timer_install done"
    }

    suspend_timer_uninstall() {
        rm -f $INSTALL_DIR/bin/suspend-then-shutdown $INSTALL_DIR/lib/systemd/system/systemd-suspend.service
        [[ $COMMAND_ARGS =~ ^(u|uninstall)$ ]] && echo "suspend_timer_uninstall done"
    }

    ryzenadj_helper_full_uninstall() {
        ryzenadj_uninstall
        ryzen_smu_uninstall
        ryzenadj_helper_uninstall
        suspend_timer_uninstall
    }

    case $COMMAND_ARGS in
        i|install)
            if command -v apt-get &>/dev/null ; then
                apt-get update
                apt-get install dkms git build-essential linux-headers-"$(uname -r)" cmake libpci-dev mokutil util-linux -y
            elif command -v dnf &>/dev/null ; then
                dnf install dkms git kernel-headers cmake gcc-c++ pciutils-devel mokutil util-linux -y
            elif command -v pacman &>/dev/null ; then
                pacman -S -y -y
                pacman -S dkms git linux-headers base-devel pciutils cmake mokutil util-linux --noconfirm
#             elif command -v zypper &>/dev/null ; then
#                 zypper in dkms git linux-headers cmake gcc14-c++ pciutils-devel mokutil -y
            fi
            custom_args_ryzenadj
            ryzenadj_helper_full_uninstall
            ryzenadj_install
            [[ ! $arg7 =~ ^(n|no)$ ]] && ryzen_smu_install
            ryzenadj_helper_install
            [[ ! $arg8 =~ ^(n|no)$ ]] && suspend_timer_install
        ;;
        u|uninstall)
            ryzenadj_helper_full_uninstall
        ;;
        *) echo "${translations[For help, please use './ryzenadj_helper_installer help']}" ;;
    esac

    exit 0
fi
